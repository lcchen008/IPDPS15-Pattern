#include <stdio.h>
#ifndef REDUCTION
#define REDUCTION

#include <math.h>
#include "kmeans.h"
#include "regular/kernel_tools.h"
#include "regular/data_type.h"

#if defined(GPU_KERNEL)
#define DEVICE __device__
namespace FFGPU{
#elif defined(CPU_KERNEL)
#define DEVICE
namespace FFCPU{
#endif

//Define the way of emitting key-value pairs
template <class T>
DEVICE bool map(T *object, void *global_data, int index, void *parameter, int device_type)
{
	//int data_start = offset->offset;
        //printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~offset is: %d\n", index);
	float *start = (float *)((char *)global_data + index);

        float dim1 = start[0];
        float dim2 = start[1];
        float dim3 = start[2];


        unsigned int key = 0;

        float min_dist = 65536*65;
        float dist;
        //The first K points are the cluster centers
        for(int i = 0; i<K; i++)
        {
                dist = 0;
                float cluster_dim1 = ((float *)parameter)[KMEANS_DIM*i];
                float cluster_dim2 = ((float *)parameter)[KMEANS_DIM*i+1];
                float cluster_dim3 = ((float *)parameter)[KMEANS_DIM*i+2];

                dist = (cluster_dim1-dim1)*(cluster_dim1-dim1)+(cluster_dim2-dim2)*(cluster_dim2-dim2)+(cluster_dim3-dim3)*(cluster_dim3-dim3);
                dist = sqrt(dist);
                if(dist < min_dist)
                {
                        min_dist = dist;
                        key = i;
                }
        }

	//if(key == 23)
        //printf("data point: %f %f %f\n", dim1, dim2, dim3);
	//if(device_type == 1)
        //printf("key is: %d\n", key);

        float value[5];
        value[0] = dim1;
        value[1] = dim2;
        value[2] = dim3;
        value[3] = 1;   //The last element of value records the number of one point, i.e., 1
        value[4] = min_dist;

	//if(key!=23)
        return object->insert(&key, sizeof(key), value, sizeof(value));

	//else
	//	return true;
}

DEVICE void reduce(void *value1, unsigned short value1_size, void *value2, unsigned short value2_size)
{
        float num_points1 = ((float *)value1)[3];
        float num_points2 = ((float *)value2)[3];
        float dist1 = ((float *)value1)[4];
        float dist2 = ((float *)value2)[4];
        float total_points = num_points1+num_points2;
        float temp[5];
        temp[0] = ((float *)value1)[0] + ((float *)value2)[0];
        temp[1] = ((float *)value1)[1] + ((float *)value2)[1];
        temp[2] = ((float *)value1)[2] + ((float *)value2)[2];
        temp[3] = total_points;
        temp[4] = dist1+dist2;

        copy_val(value1, temp, sizeof(float)*5);
}

DEVICE int compare(void *&key1, unsigned short &key1_size, void *&key2, unsigned short &key2_size, void *&value1, unsigned short value1_size,  void *&value2, unsigned short value2_size)
{
    return 0;
}

}
#endif
